import os
import random
from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from dotenv import load_dotenv

TOKEN = "–°–Æ–î–ê –¢–û–ö–ï–ù"
bot = Bot(token=TOKEN)
dp = Dispatcher()

# –•—Ä–∞–Ω–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∏–≥—Ä –ø–æ chat_id
game_states = {}

# ============================
# –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
# ============================
def main_menu():
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="–£–≥–∞–¥–∞–π —á–∏—Å–ª–æ üé≤", callback_data="menu:guess_number")],
        [InlineKeyboardButton(text="Blackjack üÉè", callback_data="menu:blackjack")],
        [InlineKeyboardButton(text="–ö–∞–º–µ–Ω—å-–ù–æ–∂–Ω–∏—Ü—ã-–ë—É–º–∞–≥–∞ ‚úÇÔ∏èü™®üìÑ", callback_data="menu:rps")],
        [InlineKeyboardButton(text="–ö—É–±–∏–∫ üé≤", callback_data="menu:dice")],
        [InlineKeyboardButton(text="–í–∏–∫—Ç–æ—Ä–∏–Ω–∞ ‚ùì", callback_data="menu:trivia")],
        [InlineKeyboardButton(text="–í–∏—Å–µ–ª–∏—Ü–∞ ü™¢", callback_data="menu:hangman")],
        [InlineKeyboardButton(text="–°–ª–æ—Ç-–º–∞—à–∏–Ω–∞ üé∞", callback_data="menu:slots")],
        [InlineKeyboardButton(text="–ú–∞—Ç–µ–º–∞—Ç–∏–∫ üßÆ", callback_data="menu:math")],
        [InlineKeyboardButton(text="–ú–æ–Ω–µ—Ç–∫–∞ ü™ô", callback_data="menu:coin")],
        [InlineKeyboardButton(text="High-Low –ö–∞—Ä—Ç–∞ üÉè", callback_data="menu:highlow")],
    ])

def exit_button():
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üîô –í—ã—Ö–æ–¥ –≤ –º–µ–Ω—é", callback_data="exit:menu")]
    ])

# ============================
# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ /start
# ============================
@dp.message(Command("start"))
async def cmd_start(message: types.Message):
    chat_id = message.chat.id
    if chat_id in game_states:
        del game_states[chat_id]
    await message.answer("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –í—ã–±–µ—Ä–∏—Ç–µ –∏–≥—Ä—É:", reply_markup=main_menu())

# ============================
# –í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
# ============================
@dp.callback_query(lambda c: c.data == "exit:menu")
async def exit_to_menu(callback: types.CallbackQuery):
    chat_id = callback.message.chat.id
    if chat_id in game_states:
        del game_states[chat_id]
    await callback.message.edit_text("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –í—ã–±–µ—Ä–∏—Ç–µ –∏–≥—Ä—É:", reply_markup=main_menu())
    await callback.answer()

# ============================
# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –∏–≥—Ä—ã
# ============================
@dp.callback_query(lambda c: c.data and c.data.startswith("menu:"))
async def start_game(callback: types.CallbackQuery):
    data = callback.data.split(":")[1]
    chat_id = callback.message.chat.id

    # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—Ç–∞—Ä–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ (–µ—Å–ª–∏ –±—ã–ª–æ)
    if chat_id in game_states:
        del game_states[chat_id]

    # ===== –£–≥–∞–¥–∞–π —á–∏—Å–ª–æ =====
    if data == "guess_number":
        target = random.randint(1, 100)
        game_states[chat_id] = {"game": "guess_number", "target": target, "tries": 0}
        text = (
            "–Ø –∑–∞–≥–∞–¥–∞–ª —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 100. ü§î\n"
            "–ü–æ–ø—Ä–æ–±—É–π —É–≥–∞–¥–∞—Ç—å! –í–≤–µ–¥–∏ —Å–≤–æ—ë —á–∏—Å–ª–æ:"
        )
        await callback.message.edit_text(text, reply_markup=exit_button())

    # ===== Blackjack =====
    elif data == "blackjack":
        deck = [r + s for r in "23456789TJQKA" for s in "CDHS"]
        random.shuffle(deck)
        player = [deck.pop(), deck.pop()]
        dealer = [deck.pop(), deck.pop()]
        game_states[chat_id] = {"game": "blackjack", "deck": deck, "player": player, "dealer": dealer}
        player_text = " ".join(player)
        text = (
            f"Blackjack üÉè\n"
            f"–í–∞—à–∏ –∫–∞—Ä—Ç—ã: {player_text}\n"
            f"–î–∏–ª–µ—Ä –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç: {dealer[0]}\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
        )
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [
                InlineKeyboardButton(text="üÉè –í–∑—è—Ç—å –∫–∞—Ä—Ç—É (Hit)", callback_data="bj:hit"),
                InlineKeyboardButton(text="üõë –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å—Å—è (Stand)", callback_data="bj:stand")
            ],
            [InlineKeyboardButton(text="üîô –í—ã—Ö–æ–¥ –≤ –º–µ–Ω—é", callback_data="exit:menu")]
        ])
        await callback.message.edit_text(text, reply_markup=keyboard)

    # ===== –ö–∞–º–µ–Ω—å-–ù–æ–∂–Ω–∏—Ü—ã-–ë—É–º–∞–≥–∞ =====
    elif data == "rps":
        game_states[chat_id] = {"game": "rps"}
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [
                InlineKeyboardButton(text="‚úä –ö–∞–º–µ–Ω—å", callback_data="rps:rock"),
                InlineKeyboardButton(text="‚úã –ë—É–º–∞–≥–∞", callback_data="rps:paper"),
                InlineKeyboardButton(text="‚úåÔ∏è –ù–æ–∂–Ω–∏—Ü—ã", callback_data="rps:scissors")
            ],
            [InlineKeyboardButton(text="üîô –í—ã—Ö–æ–¥ –≤ –º–µ–Ω—é", callback_data="exit:menu")]
        ])
        await callback.message.edit_text("–ö–∞–º–µ–Ω—å-–ù–æ–∂–Ω–∏—Ü—ã-–ë—É–º–∞–≥–∞! –í—ã–±–µ—Ä–∏—Ç–µ:", reply_markup=keyboard)

    # ===== –ö—É–±–∏–∫ =====
    elif data == "dice":
        game_states[chat_id] = {"game": "dice"}
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [
                InlineKeyboardButton(text="üîº –ë–æ–ª—å—à–æ–µ (4-6)", callback_data="dice:high"),
                InlineKeyboardButton(text="üîΩ –ú–∞–ª–µ–Ω—å–∫–æ–µ (1-3)", callback_data="dice:low")
            ],
            [InlineKeyboardButton(text="üîô –í—ã—Ö–æ–¥ –≤ –º–µ–Ω—é", callback_data="exit:menu")]
        ])
        await callback.message.edit_text("–ö—É–±–∏–∫ üé≤! –£–≥–∞–¥–∞–π: –±–æ–ª—å—à–æ–µ (4-6) –∏–ª–∏ –º–∞–ª–µ–Ω—å–∫–æ–µ (1-3)?", reply_markup=keyboard)

    # ===== –í–∏–∫—Ç–æ—Ä–∏–Ω–∞ =====
    elif data == "trivia":
        question = "–°—Ç–æ–ª–∏—Ü–∞ –§—Ä–∞–Ω—Ü–∏–∏?"
        options = [("–ü–∞—Ä–∏–∂", True), ("–õ–æ–Ω–¥–æ–Ω", False), ("–ë–µ—Ä–ª–∏–Ω", False), ("–†–∏–º", False)]
        random.shuffle(options)
        keyboard = InlineKeyboardMarkup(
            inline_keyboard=[[InlineKeyboardButton(text=opt[0], callback_data=f"trivia:{opt[1]}")] for opt in options] + 
            [[InlineKeyboardButton(text="üîô –í—ã—Ö–æ–¥ –≤ –º–µ–Ω—é", callback_data="exit:menu")]]
        )
        game_states[chat_id] = {"game": "trivia"}
        await callback.message.edit_text(question, reply_markup=keyboard)

    # ===== –í–∏—Å–µ–ª–∏—Ü–∞ =====
    elif data == "hangman":
        words = ["–∞–∑–±—É–∫–∞", "–≤–∏—Å–µ–ª–∏—Ü–∞","–ø–∏—Ç–æ–Ω","–±–æ—Ç","—Ç–µ—Å—Ç"]
        word = random.choice(words)
        state = {
            "game": "hangman",
            "word": word,
            "guessed": [],
            "tries": 6
        }
        display = " ".join(["_" for _ in word])
        game_states[chat_id] = state
        row1 = [InlineKeyboardButton(text=chr(ord('–ê') + i), callback_data=f"hangman_letter:{chr(ord('–ê') + i)}") for i in range(13)]
        row2 = [InlineKeyboardButton(text=chr(ord('–ê') + i), callback_data=f"hangman_letter:{chr(ord('–ê') + i)}") for i in range(13, 26)]
        row3 = [InlineKeyboardButton(text=chr(ord('–ê') + i), callback_data=f"hangman_letter:{chr(ord('–ê') + i)}") for i in range(26, 33)]
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            row1,
            row2,
            row3,
            [InlineKeyboardButton(text="üîô –í—ã—Ö–æ–¥ –≤ –º–µ–Ω—é", callback_data="exit:menu")]
        ])
        await callback.message.edit_text(f"–í–∏—Å–µ–ª–∏—Ü–∞ ü™¢\n{display}\n–û—Å—Ç–∞–ª–æ—Å—å –ø–æ–ø—ã—Ç–æ–∫: 6", reply_markup=keyboard)

    # ===== –°–ª–æ—Ç-–º–∞—à–∏–Ω–∞ =====
    elif data == "slots":
        game_states[chat_id] = {"game": "slots"}
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üé∞ –ö—Ä—É—Ç–∏—Ç—å", callback_data="slots:spin")],
            [InlineKeyboardButton(text="üîô –í—ã—Ö–æ–¥ –≤ –º–µ–Ω—é", callback_data="exit:menu")]
        ])
        await callback.message.edit_text("–°–ª–æ—Ç-–º–∞—à–∏–Ω–∞ üé∞! –ù–∞–∂–º–∏ ¬´–ö—Ä—É—Ç–∏—Ç—å¬ª:", reply_markup=keyboard)

    # ===== –ú–∞—Ç–µ–º–∞—Ç–∏–∫ =====
    elif data == "math":
        a, b = random.randint(1, 10), random.randint(1, 10)
        op = random.choice(["+", "-"])
        answer = eval(f"{a}{op}{b}")
        options = [answer] + [answer + random.choice([-2, -1, 1, 2]) for _ in range(3)]
        random.shuffle(options)
        keyboard = InlineKeyboardMarkup(
            inline_keyboard=[[InlineKeyboardButton(text=str(opt), callback_data=f"math:{opt==answer}")] for opt in options] +
            [[InlineKeyboardButton(text="üîô –í—ã—Ö–æ–¥ –≤ –º–µ–Ω—é", callback_data="exit:menu")]]
        )
        game_states[chat_id] = {"game": "math"}
        await callback.message.edit_text(f"–ú–∞—Ç–µ–º–∞—Ç–∏–∫ üßÆ\n–†–µ—à–∏—Ç–µ: {a} {op} {b}", reply_markup=keyboard)

    # ===== –ú–æ–Ω–µ—Ç–∫–∞ =====
    elif data == "coin":
        game_states[chat_id] = {"game": "coin"}
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üü¢ –û—Ä—ë–ª", callback_data="coin:heads")],
            [InlineKeyboardButton(text="üî¥ –†–µ—à–∫–∞", callback_data="coin:tails")],
            [InlineKeyboardButton(text="üîô –í—ã—Ö–æ–¥ –≤ –º–µ–Ω—é", callback_data="exit:menu")]
        ])
        await callback.message.edit_text("–ú–æ–Ω–µ—Ç–∫–∞ ü™ô! –í—ã–±–µ—Ä–∏—Ç–µ –û—Ä—ë–ª –∏–ª–∏ –†–µ—à–∫–∞:", reply_markup=keyboard)

    # ===== High-Low –ö–∞—Ä—Ç–∞ =====
    elif data == "highlow":
        deck = list(range(1, 14))
        first = random.choice(deck)
        game_states[chat_id] = {"game": "highlow", "first": first}
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚¨ÜÔ∏è –í—ã—à–µ", callback_data="highlow:higher")],
            [InlineKeyboardButton(text="‚¨áÔ∏è –ù–∏–∂–µ", callback_data="highlow:lower")],
            [InlineKeyboardButton(text="üîô –í—ã—Ö–æ–¥ –≤ –º–µ–Ω—é", callback_data="exit:menu")]
        ])
        await callback.message.edit_text(f"High-Low –ö–∞—Ä—Ç–∞ üÉè\n–ü–µ—Ä–≤–∞—è –∫–∞—Ä—Ç–∞: {first}\n–°–ª–µ–¥—É—é—â–∞—è –±—É–¥–µ—Ç –≤—ã—à–µ –∏–ª–∏ –Ω–∏–∂–µ?", reply_markup=keyboard)

    await callback.answer()

# ============================
# –£–≥–∞–¥–∞–π —á–∏—Å–ª–æ: –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
# ============================
@dp.message(lambda m: m.text and game_states.get(m.chat.id, {}).get("game") == "guess_number")
async def handle_guess_number(message: types.Message):
    chat_id = message.chat.id
    state = game_states[chat_id]
    text = message.text.strip()

    if not text.isdigit():
        await message.answer("‚ùó –í–≤–µ–¥–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 100.")
        return

    guess = int(text)
    target = state["target"]
    state["tries"] += 1

    if guess < 1 or guess > 100:
        await message.answer("‚ùó –ß–∏—Å–ª–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –æ—Ç 1 –¥–æ 100. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        return

    if guess < target:
        await message.answer("–ú–æ—ë —á–∏—Å–ª–æ –±–æ–ª—å—à–µ! üîº –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.")
    elif guess > target:
        await message.answer("–ú–æ—ë —á–∏—Å–ª–æ –º–µ–Ω—å—à–µ! üîΩ –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.")
    else:
        tries = state["tries"]
        text = (
            f"üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è—é! –í—ã —É–≥–∞–¥–∞–ª–∏ —á–∏—Å–ª–æ {target} –∑–∞ {tries} –ø–æ–ø—ã—Ç–æ–∫.\n"
            "–•–æ—Ç–∏—Ç–µ —Å—ã–≥—Ä–∞—Ç—å –µ—â—ë —Ä–∞–∑?"
        )
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üîÅ –°–Ω–æ–≤–∞", callback_data="menu:guess_number")],
            [InlineKeyboardButton(text="üîô –í—ã—Ö–æ–¥ –≤ –º–µ–Ω—é", callback_data="exit:menu")]
        ])
        await message.answer(text, reply_markup=keyboard)
        del game_states[chat_id]

# ============================
# Blackjack
# ============================
def calculate_hand_value(cards):
    value = 0
    aces = 0
    for card in cards:
        rank = card[:-1]
        if rank.isdigit():
            value += int(rank)
        elif rank in ["T", "J", "Q", "K"]:
            value += 10
        else:  # "A"
            aces += 1
            value += 11
    while value > 21 and aces:
        value -= 10
        aces -= 1
    return value

@dp.callback_query(lambda c: c.data and c.data.startswith("bj:"))
async def handle_blackjack(callback: types.CallbackQuery):
    chat_id = callback.message.chat.id
    state = game_states.get(chat_id)
    if not state or state.get("game") != "blackjack":
        await callback.answer("–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –∏–≥—Ä—ã Blackjack.", show_alert=True)
        return

    action = callback.data.split(":")[1]
    deck = state["deck"]
    player = state["player"]
    dealer = state["dealer"]

    if action == "hit":
        card = deck.pop()
        player.append(card)
        player_val = calculate_hand_value(player)
        if player_val > 21:
            text = (
                f"–í—ã –≤–∑—è–ª–∏ {card}. –í–∞—à–∏ –∫–∞—Ä—Ç—ã: {player} ({player_val}).\n"
                "–ü–µ—Ä–µ–±–æ—Ä! –í—ã –ø—Ä–æ–∏–≥—Ä–∞–ª–∏. üò¢"
            )
            await callback.message.edit_text(text, reply_markup=main_menu())
            del game_states[chat_id]
            await callback.answer()
            return
        hand_text = (
            f"–í—ã –≤–∑—è–ª–∏ {card}. –í–∞—à–∏ –∫–∞—Ä—Ç—ã: {player} ({player_val}).\n"
            f"–î–∏–ª–µ—Ä –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç: {dealer[0]}\n"
            "–í–∞—à —Ö–æ–¥:"
        )
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [
                InlineKeyboardButton(text="üÉè –í–∑—è—Ç—å (Hit)", callback_data="bj:hit"),
                InlineKeyboardButton(text="üõë –°—Ç–æ–ø (Stand)", callback_data="bj:stand")
            ],
            [InlineKeyboardButton(text="üîô –í—ã—Ö–æ–¥ –≤ –º–µ–Ω—é", callback_data="exit:menu")]
        ])
        await callback.message.edit_text(hand_text, reply_markup=keyboard)
    else:  # Stand
        dealer_val = calculate_hand_value(dealer)
        while dealer_val < 17:
            card = state["deck"].pop()
            dealer.append(card)
            dealer_val = calculate_hand_value(dealer)
        player_val = calculate_hand_value(player)
        if dealer_val > 21:
            result = "–î–∏–ª–µ—Ä –ø–µ—Ä–µ–±—Ä–∞–ª! –í—ã –ø–æ–±–µ–¥–∏–ª–∏! üéâ"
        elif dealer_val > player_val:
            result = "–î–∏–ª–µ—Ä –≤—ã–∏–≥—Ä—ã–≤–∞–µ—Ç. üò¢"
        elif dealer_val < player_val:
            result = "–í—ã –ø–æ–±–µ–∂–¥–∞–µ—Ç–µ! üéâ"
        else:
            result = "–ù–∏—á—å—è! ü§ù"

        text = (
            f"–î–∏–ª–µ—Ä: {dealer} ({dealer_val})\n"
            f"–í—ã: {player} ({player_val})\n"
            f"{result}"
        )
        await callback.message.edit_text(text, reply_markup=main_menu())
        del game_states[chat_id]

    await callback.answer()

# ============================
# –ö–∞–º–µ–Ω—å-–ù–æ–∂–Ω–∏—Ü—ã-–ë—É–º–∞–≥–∞
# ============================
@dp.callback_query(lambda c: c.data and c.data.startswith("rps:"))
async def handle_rps(callback: types.CallbackQuery):
    chat_id = callback.message.chat.id
    state = game_states.get(chat_id)
    if not state or state.get("game") != "rps":
        await callback.answer("–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –∏–≥—Ä—ã –ö–∞–º–µ–Ω—å-–ù–æ–∂–Ω–∏—Ü—ã-–ë—É–º–∞–≥–∞.", show_alert=True)
        return

    user_choice = callback.data.split(":")[1]
    choices = ["rock", "paper", "scissors"]
    bot_choice = random.choice(choices)
    if user_choice == bot_choice:
        result = "–ù–∏—á—å—è!"
    elif (user_choice == "rock" and bot_choice == "scissors") or \
         (user_choice == "paper" and bot_choice == "rock") or \
         (user_choice == "scissors" and bot_choice == "paper"):
        result = "–í—ã –≤—ã–∏–≥—Ä–∞–ª–∏! üéâ"
    else:
        result = "–í—ã –ø—Ä–æ–∏–≥—Ä–∞–ª–∏! üò¢"

    mapping = {"rock": "–ö–∞–º–µ–Ω—å", "paper": "–ë—É–º–∞–≥–∞", "scissors": "–ù–æ–∂–Ω–∏—Ü—ã"}
    text = f"–í—ã: {mapping[user_choice]}\n–ë–æ—Ç: {mapping[bot_choice]}\n{result}"
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üîÅ –°–Ω–æ–≤–∞", callback_data="menu:rps")],
        [InlineKeyboardButton(text="üîô –í—ã—Ö–æ–¥ –≤ –º–µ–Ω—é", callback_data="exit:menu")]
    ])
    await callback.message.edit_text(text, reply_markup=keyboard)
    del game_states[chat_id]
    await callback.answer()

# ============================
# –ö—É–±–∏–∫
# ============================
@dp.callback_query(lambda c: c.data and c.data.startswith("dice:"))
async def handle_dice(callback: types.CallbackQuery):
    chat_id = callback.message.chat.id
    state = game_states.get(chat_id)
    if not state or state.get("game") != "dice":
        await callback.answer("–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –∏–≥—Ä—ã –ö—É–±–∏–∫.", show_alert=True)
        return

    guess = callback.data.split(":")[1]  # "high" –∏–ª–∏ "low"
    roll = random.randint(1, 6)
    if (roll >= 4 and guess == "high") or (roll <= 3 and guess == "low"):
        result = "–í—ã –≤—ã–∏–≥—Ä–∞–ª–∏! üéâ"
    else:
        result = "–í—ã –ø—Ä–æ–∏–≥—Ä–∞–ª–∏! üò¢"
    text = f"–í—ã–ø–∞–ª–æ: {roll}\n{result}"
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üîÅ –°–Ω–æ–≤–∞", callback_data="menu:dice")],
        [InlineKeyboardButton(text="üîô –í—ã—Ö–æ–¥ –≤ –º–µ–Ω—é", callback_data="exit:menu")]
    ])
    await callback.message.edit_text(text, reply_markup=keyboard)
    del game_states[chat_id]
    await callback.answer()

# ============================
# –í–∏–∫—Ç–æ—Ä–∏–Ω–∞
# ============================
@dp.callback_query(lambda c: c.data and c.data.startswith("trivia:"))
async def handle_trivia(callback: types.CallbackQuery):
    chat_id = callback.message.chat.id
    state = game_states.get(chat_id)
    if not state or state.get("game") != "trivia":
        await callback.answer("–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –í–∏–∫—Ç–æ—Ä–∏–Ω—ã.", show_alert=True)
        return

    correct = callback.data.split(":")[1] == "True"
    if correct:
        text = "–í–µ—Ä–Ω–æ! üéâ"
    else:
        text = "–ù–µ–≤–µ—Ä–Ω–æ! üò¢ –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: –ü–∞—Ä–∏–∂."
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üîÅ –°–Ω–æ–≤–∞", callback_data="menu:trivia")],
        [InlineKeyboardButton(text="üîô –í—ã—Ö–æ–¥ –≤ –º–µ–Ω—é", callback_data="exit:menu")]
    ])
    await callback.message.edit_text(text, reply_markup=keyboard)
    del game_states[chat_id]
    await callback.answer()

# ============================
# –í–∏—Å–µ–ª–∏—Ü–∞
# ============================
@dp.callback_query(lambda c: c.data and c.data.startswith("hangman_letter:"))
async def handle_hangman(callback: types.CallbackQuery):
    chat_id = callback.message.chat.id
    state = game_states.get(chat_id)
    if not state or state.get("game") != "hangman":
        await callback.answer("–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –∏–≥—Ä—ã –í–∏—Å–µ–ª–∏—Ü–∞.", show_alert=True)
        return

    letter = callback.data.split(":")[1].lower()
    word = state["word"]
    guessed = state["guessed"]
    tries = state["tries"]

    if letter in guessed:
        await callback.answer("–≠—Ç–∞ –±—É–∫–≤–∞ —É–∂–µ –±—ã–ª–∞!", show_alert=True)
        return

    guessed.append(letter)
    if letter not in word:
        tries -= 1
        state["tries"] = tries

    display = " ".join([ch.upper() if ch in guessed else "_" for ch in word])

    if all(ch in guessed for ch in word):
        text = f"–í–∏—Å–µ–ª–∏—Ü–∞ ü™¢\n–°–ª–æ–≤–æ: {word.upper()}\n–í—ã –≤—ã–∏–≥—Ä–∞–ª–∏! üéâ"
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üîÅ –°–Ω–æ–≤–∞", callback_data="menu:hangman")],
            [InlineKeyboardButton(text="üîô –í—ã—Ö–æ–¥ –≤ –º–µ–Ω—é", callback_data="exit:menu")]
        ])
        await callback.message.edit_text(text, reply_markup=keyboard)
        del game_states[chat_id]
        await callback.answer()
        return
    elif tries <= 0:
        text = f"–í–∏—Å–µ–ª–∏—Ü–∞ ü™¢\n–°–ª–æ–≤–æ: {word.upper()}\n–í—ã –ø—Ä–æ–∏–≥—Ä–∞–ª–∏! üò¢"
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üîÅ –°–Ω–æ–≤–∞", callback_data="menu:hangman")],
            [InlineKeyboardButton(text="üîô –í—ã—Ö–æ–¥ –≤ –º–µ–Ω—é", callback_data="exit:menu")]
        ])
        await callback.message.edit_text(text, reply_markup=keyboard)
        del game_states[chat_id]
        await callback.answer()
        return

    state["guessed"] = guessed
    state["tries"] = tries
    row1 = [InlineKeyboardButton(text=chr(ord('–ê') + i), callback_data=f"hangman_letter:{chr(ord('–ê') + i)}") for i in range(13)]
    row2 = [InlineKeyboardButton(text=chr(ord('–ê') + i), callback_data=f"hangman_letter:{chr(ord('–ê') + i)}") for i in range(13, 26)]
    row3 = [InlineKeyboardButton(text=chr(ord('–ê') + i), callback_data=f"hangman_letter:{chr(ord('–ê') + i)}") for i in range(26, 33)]
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        row1,
        row2,
        row3,
        [InlineKeyboardButton(text="üîô –í—ã—Ö–æ–¥ –≤ –º–µ–Ω—é", callback_data="exit:menu")]
    ])
    await callback.message.edit_text(f"–í–∏—Å–µ–ª–∏—Ü–∞ ü™¢\n{display}\n–û—Å—Ç–∞–ª–æ—Å—å –ø–æ–ø—ã—Ç–æ–∫: {tries}", reply_markup=keyboard)
    await callback.answer()

# ============================
# –°–ª–æ—Ç-–º–∞—à–∏–Ω–∞
# ============================
@dp.callback_query(lambda c: c.data and c.data.startswith("slots:"))
async def handle_slots(callback: types.CallbackQuery):
    chat_id = callback.message.chat.id
    state = game_states.get(chat_id)
    if not state or state.get("game") != "slots":
        await callback.answer("–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –°–ª–æ—Ç-–º–∞—à–∏–Ω—ã.", show_alert=True)
        return

    action = callback.data.split(":")[1]
    if action == "spin":
        symbols = ["üçí", "üçã", "üçä", "‚≠ê", "7Ô∏è‚É£"]
        reels = [random.choice(symbols) for _ in range(3)]
        if len(set(reels)) == 1:
            result = "–î–∂–µ–∫–ø–æ—Ç! üéâ"
        else:
            result = "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑! üò¢"
        text = f"–ö—Ä—É—Ç–∏—Ç—Å—è: {' '.join(reels)}\n{result}"
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üîÅ –°–Ω–æ–≤–∞", callback_data="slots:spin")],
            [InlineKeyboardButton(text="üîô –í—ã—Ö–æ–¥ –≤ –º–µ–Ω—é", callback_data="exit:menu")]
        ])
        await callback.message.edit_text(text, reply_markup=keyboard)
        await callback.answer()

# ============================
# –ú–∞—Ç–µ–º–∞—Ç–∏–∫
# ============================
@dp.callback_query(lambda c: c.data and c.data.startswith("math:"))
async def handle_math(callback: types.CallbackQuery):
    chat_id = callback.message.chat.id
    state = game_states.get(chat_id)
    if not state or state.get("game") != "math":
        await callback.answer("–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –∏–≥—Ä—ã –ú–∞—Ç–µ–º–∞—Ç–∏–∫.", show_alert=True)
        return

    correct = callback.data.split(":")[1] == "True"
    if correct:
        text = "–í–µ—Ä–Ω–æ! üéâ"
    else:
        text = "–ù–µ–≤–µ—Ä–Ω–æ! üò¢"
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üîÅ –°–Ω–æ–≤–∞", callback_data="menu:math")],
        [InlineKeyboardButton(text="üîô –í—ã—Ö–æ–¥ –≤ –º–µ–Ω—é", callback_data="exit:menu")]
    ])
    await callback.message.edit_text(text, reply_markup=keyboard)
    del game_states[chat_id]
    await callback.answer()

# ============================
# –ú–æ–Ω–µ—Ç–∫–∞
# ============================
@dp.callback_query(lambda c: c.data and c.data.startswith("coin:"))
async def handle_coin(callback: types.CallbackQuery):
    chat_id = callback.message.chat.id
    state = game_states.get(chat_id)
    if not state or state.get("game") != "coin":
        await callback.answer("–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –∏–≥—Ä—ã –ú–æ–Ω–µ—Ç–∫–∞.", show_alert=True)
        return

    guess = callback.data.split(":")[1]  # "heads" –∏–ª–∏ "tails"
    flip = random.choice(["heads", "tails"])
    if guess == flip:
        text = f"–ú–æ–Ω–µ—Ç–∞ –ø–æ–∫–∞–∑–∞–ª–∞ { '–û—Ä—ë–ª' if flip=='heads' else '–†–µ—à–∫–∞' }. –í—ã –≤—ã–∏–≥—Ä–∞–ª–∏! üéâ"
    else:
        text = f"–ú–æ–Ω–µ—Ç–∞ –ø–æ–∫–∞–∑–∞–ª–∞ { '–û—Ä—ë–ª' if flip=='heads' else '–†–µ—à–∫–∞' }. –í—ã –ø—Ä–æ–∏–≥—Ä–∞–ª–∏! üò¢"
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üîÅ –°–Ω–æ–≤–∞", callback_data="menu:coin")],
        [InlineKeyboardButton(text="üîô –í—ã—Ö–æ–¥ –≤ –º–µ–Ω—é", callback_data="exit:menu")]
    ])
    await callback.message.edit_text(text, reply_markup=keyboard)
    del game_states[chat_id]
    await callback.answer()

# ============================
# High-Low –ö–∞—Ä—Ç–∞
# ============================
@dp.callback_query(lambda c: c.data and c.data.startswith("highlow:"))
async def handle_highlow(callback: types.CallbackQuery):
    chat_id = callback.message.chat.id
    state = game_states.get(chat_id)
    if not state or state.get("game") != "highlow":
        await callback.answer("–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –∏–≥—Ä—ã High-Low.", show_alert=True)
        return

    guess = callback.data.split(":")[1]  # "higher" –∏–ª–∏ "lower"
    first = state["first"]
    next_card = random.randint(1, 13)
    if (next_card > first and guess == "higher") or (next_card < first and guess == "lower"):
        text = f"–ü–µ—Ä–≤–∞—è –∫–∞—Ä—Ç–∞: {first}\n–°–ª–µ–¥—É—é—â–∞—è: {next_card}\n–í—ã –≤—ã–∏–≥—Ä–∞–ª–∏! üéâ"
    elif next_card == first:
        text = f"–ü–µ—Ä–≤–∞—è –∫–∞—Ä—Ç–∞: {first}\n–°–ª–µ–¥—É—é—â–∞—è: {next_card}\n–ù–∏—á—å—è! ü§ù"
    else:
        text = f"–ü–µ—Ä–≤–∞—è –∫–∞—Ä—Ç–∞: {first}\n–°–ª–µ–¥—É—é—â–∞—è: {next_card}\n–í—ã –ø—Ä–æ–∏–≥—Ä–∞–ª–∏! üò¢"
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üîÅ –°–Ω–æ–≤–∞", callback_data="menu:highlow")],
        [InlineKeyboardButton(text="üîô –í—ã—Ö–æ–¥ –≤ –º–µ–Ω—é", callback_data="exit:menu")]
    ])
    await callback.message.edit_text(text, reply_markup=keyboard)
    del game_states[chat_id]
    await callback.answer()

# ============================
# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
# ============================
if __name__ == "__main__":
    dp.run_polling(bot)
